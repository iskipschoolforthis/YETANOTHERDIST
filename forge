#!/bin/bash

# Configuration
REPO_BASE_DIR="/usr/local/repos"
BLACKLIST_FILE="/usr/local/repos/blacklist.txt"
REPO_URL="https://github.com/yourusername/yourrepo.git"

# Function to display usage
usage() {
    echo "Usage: $0 [option] [package]"
    echo "Options:"
    echo "  -h, --help            Display this help message"
    echo "  -i, --install         Install a package"
    echo "  -r, --remove          Remove a package from local repo"
    echo "  --remove-forever      Remove a package from repo permanently"
    echo "  -u, --uninstall       Uninstall a package"
    echo "  -s, --search          Search for a package"
    echo "  -v, --version         Show the current version of a package"
    echo "  --update              Update the repo from GitHub"
    echo "  --upgrade             Rebuild packages with new versions"
    exit 1
}

# Function to install a package
install_package() {
    package="$1"
    found=false
    for repo in "$REPO_BASE_DIR"/*; do
        if [ -x "$repo/$package/build.sh" ]; then
            echo "Installing package $package from repo $(basename $repo)..."
            (cd "$repo/$package" && sh build.sh $2)
            echo "Package $package installed successfully."
            found=true
            break
        fi
    done
    if [ "$found" == false ]; then
        echo "Build script not found for package $package in any repo."
    fi
}

# Main function
main() {
    if [ "$#" -lt 1 ]; then
        usage
    fi

    case "$1" in
        -h | --help)
            usage
            ;;
        -i | --install)
            install_package "$2"
            ;;
        -r | --remove)
            remove_package "$2"
            ;;
        --remove-forever)
            remove_forever "$2"
            ;;
        -u | --uninstall)
            uninstall_package "$2"
            ;;
        -s | --search)
            search_package "$2"
            ;;
        -v | --version)
            show_version "$2"
            ;;
        --update)
            update_repo
            ;;
        --upgrade)
            upgrade_packages
            ;;
        *)
            echo "Invalid option: $1"
            usage
            ;;
    esac
}

# Check if root
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root"
    exit 1
fi

main "$@"
